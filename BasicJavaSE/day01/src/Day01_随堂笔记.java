//1. Java简介(理解)
//	问题1: 为什么学习大数据需要学习Java?
//	答案:
//		1. Java语言提供了大数据的基础性支持.
//		2. Java语言应用非常广泛.
//		3. Java中有非常完善的异常处理机制.
//			//Throwable, Error, Exception
//		4. Java是一门强类型的语言
//			//所谓强弱类型语言的判断标准: 看这门语言对数据的数据类型划分是否精细.
//	问题2: Java的简介.
//		Sun公司搞出来的, 2009年这公司被Oracle收购了.
//		Java之父: 詹姆斯・高斯林, 加拿大人.		//简称: 高司令.
//	问题3: Java的平台版本有哪些?
//		J2SE: JDK1.5的时候更名为: JavaSE, 标准版, 是其他两个版本的基础.		//2: To > Two,  4: for -> Four
//		J2ME: JDK1.5的时候更名为: JavaME, 小型版, 做嵌入式开发的, 已经被Android替代了.
//		J2EE: JDK1.5的时候更名为: JavaEE, 企业版, 做企业级开发应用的.
//	问题4: Java语言的特点.
//		开胯两多面.		//开源, 跨平台, 多态, 多线程, 面向对象.
//	小细节: 怎么理解跨平台?
//		//一次编译, 到处运行.
//2. Java环境搭建(掌握)
//	JDK和JRE的区别:
//		JDK:....
//		JRE:....
//		JVM:....
//	JDK的下载和安装:
//		略.
//	如何验证:
//		DOS窗口录入:  java -version
//	配置Path环境变量:
//		目的:
//			为了在任何路径下都能使用我们配置后的.exe程序.
//		步骤:
//			1. 新建一个系统变量.
//				变量名: JAVA_HOME
//				变量值: 你安装的JDK的位置, 注意不要带bin
//				//例如: 我的路径是 C:\Software\OfficeSoftware\jdk1.8.0_271
//			2. 配置Path环境变量.
//				%JAVA_HOME%\bin
//			3. 测试.
//				DOS窗口输入: java 或者 javac, 有一坨内容即可.
//3. HelloWorld案例_Notepad++版(理解)
//	Java程序的执行流程:
//		1. 编写源代码.
//			指的是在 *.java写代码(这个是源文件, 程序员能看懂, 计算机看不懂)
//		2. 编译.
//			把 *.java -> *.class(字节码文件, 计算机能看懂, 程序员看不懂)
//		3. 执行.
//			执行 *.class文件即可.
//	Java版的HelloWorld案例代码如下:
//		public class HelloWorld {
//			public static void main(String[] args) {
//				System.out.println("Hello World!");
//			}
//		}
//4. 开发Java程序的IDE(集成开发工具) //掌握
//	在哪些工具中可以写Java代码?
//		微软自带的普通记事本
//		高级记事本(例如: Notepad++, Edits)
//		IDE(例如: Eclipse, MyEclipse, IDEA)
//	IDE解释:
//		全称叫集成开发环境(Integrated Development Environment),  即: 集代码的编写, 编译, 运行, 调试等功能与一体的软件.
//	IDEA解释:
//		JetBrains公司提供的针对于Java语言的开发工具, 这家公司的总部位于捷克共和国的首都,布拉格.
//	IDEA的下载:
//		www.jetbrains.com			//2021.1.1
//	IDEA的安装:
//		1. 傻瓜式安装, 下一步下一步即可.
//		2. 注意安装路径要合法, 不要出现中文,空格,特殊符号等.
//		3. 首次启动的时候需要配置一些信息. 	//详见讲义.
//	IDEA的基本使用:
//		1. 新建一个工作空间(wordspace)
//		2. 新建一个项目(例如: JavaSE)
//		3. 在项目下新建模块(例如: Day01, Day02....)
//		4. 在模块下建包.
//			//包名要遵循全部小写的方式, 一般公司域名反写, 例如: com.itheima.demo01...
//		5. 在包中写类.
//			例如: HelloWorld.java
//	IDEA的常用快捷键:
//		详见桌面壁纸.
//	IDEA的基本设置:
//		改字体
//		改码表
//		改主题
//	IDEA如何导入和删除模块:
//		略.
//5. Java的核心基础语法
//	注释:
//		概述:
//			就是用来对程序进行解释和说明的文字, 给程序员看的, 程序在执行的时候, 并不会执行被注释的内容.
//		分类:
//			//单行注释
//			/*
//				多行注释
//				....
//			*/
//			/**
//				文档注释, 主要用来修饰类, 接口, 方法.
//			*/
//	关键字:
//		概述:
//			被Java语言赋予了特殊含义的单词.
//		特点:
//			1. 关键字全部是小写的.
//			2. 不同的编辑器(常用的编辑器)针对于关键字都会高亮显示.
//		举例:
//			public, class, static, void, protected, private...
//		扩展: //了解
//			什么是保留字?		//可以理解为: 备胎.
//			在目前的版本中还不是关键字的单词, 但是有关键字的作用, 在以后的JDK升级版本中可能会被升级为关键字的单词.
//			例如: goto, const
//	常量:
//		概述:
//			指的是在程序的执行过程中, 其值不能发生改变的量.
//		例如:
//			光的传播速度, 人的性别, 圆周率
//		分类:
//			字面值常量:
//				字符, 字符串, 整数, 小数, 布尔, 空
//			自定义常量:
//				通过 final 修饰的.		//明天面向对象详细讲.
//	变量:
//		概述:
//			指的是在程序的执行过程中, 其值能在一定范围内发生改变的量.
//		三要素:
//			1. 如何限定变量值的变化范围.
//				数据类型.
//			2. 如何使用这个变量的值.
//				变量名
//			3. 如果使用某个变量, 不给初值(初始化值)行不行?
//				不行.
//		格式:
//			数据类型 变量名  = 初值;
//			int a = 10;			//必须要写分号, 一个分号表示一行
//	数据类型简介:
//        概述:
//            就是用来限定变量值的变化过程的.
//        分类:
//            基本类型:
//                整型
//                    byte(-128~127) 1个字节, short 2, int 4, long 8
//                浮点型
//                    float 4, double 8
//                字符型
//                    char 2
//                布尔型
//                    boolean 1
//            引用类型:
//                除了上述之外, 所有, 例如: 类, 接口, 数组.  明天讲.
//		数据类型的小细节:
//			1. 默认的整形是int, 默认的浮点型是double.
//			2. long类型的变量值要加L, float要加F.
//			3. boolean类型的变量值只有true和false.
//
//
//1. 标识符.
//2. Math随机数.
//3. 猜数字的小游戏.
//